import nltk
from abc import ABC, abstractmethod
import json
import os
from typing import Dict, Any, List
import datetime

# Download required NLTK data
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')

class AIComponent(ABC):
    """Abstract base class for AI components"""
    
    @abstractmethod
    def process(self, input_data: Any) -> Any:
        pass

class TextProcessor(AIComponent):
    """Basic text processing component"""
    
    def process(self, input_text: str) -> Dict[str, Any]:
        tokens = nltk.word_tokenize(input_text)
        pos_tags = nltk.pos_tag(tokens)
        return {
            'tokens': tokens,
            'pos_tags': pos_tags,
            'word_count': len(tokens)
        }

class AIApp:
    """Main AI application builder class"""
    
    def __init__(self, name: str):
        self.name = name
        self.components: Dict[str, AIComponent] = {}
        self.config: Dict[str, Any] = {}
        self.created_at = datetime.datetime.utcnow()
        
    def add_component(self, name: str, component: AIComponent) -> None:
        """Add an AI component to the application"""
        self.components[name] = component
        
    def set_config(self, config: Dict[str, Any]) -> None:
        """Set configuration for the application"""
        self.config.update(config)
        
    def save_config(self, filepath: str) -> None:
        """Save the current configuration to a file"""
        config_data = {
            'name': self.name,
            'created_at': self.created_at.isoformat(),
            'config': self.config,
            'components': list(self.components.keys())
        }
        
        with open(filepath, 'w') as f:
            json.dump(config_data, f, indent=4)
            
    def load_config(self, filepath: str) -> None:
        """Load configuration from a file"""
        with open(filepath, 'r') as f:
            config_data = json.load(f)
            self.config = config_data['config']
            
    def process_input(self, component_name: str, input_data: Any) -> Any:
        """Process input using a specific component"""
        if component_name not in self.components:
            raise ValueError(f"Component {component_name} not found")
        return self.components[component_name].process(input_data)

class CustomNLPComponent(AIComponent):
    """Custom NLP component with basic text analysis"""
    
    def process(self, input_text: str) -> Dict[str, Any]:
        # Basic sentiment analysis (very simplified)
        positive_words = {'good', 'great', 'excellent', 'amazing', 'wonderful'}
        negative_words = {'bad', 'poor', 'terrible', 'awful', 'horrible'}
        
        words = input_text.lower().split()
        sentiment_score = sum(1 for word in words if word in positive_words) - \
                         sum(1 for word in words if word in negative_words)
        
        return {
            'text_length': len(input_text),
            'word_count': len(words),
            'sentiment_score': sentiment_score
        }

def create_sample_app() -> AIApp:
    """Create a sample AI application with basic components"""
    app = AIApp("Sample AI App")
    
    # Add components
    app.add_component('text_processor', TextProcessor())
    app.add_component('nlp', CustomNLPComponent())
    
    # Set basic configuration
    app.set_config({
        'version': '1.0',
        'description': 'Basic AI application with text processing capabilities',
        'max_input_length': 1000
    })
    
    return app

# Example usage
def main():
    # Create a new AI app
    app = create_sample_app()
    
    # Example text processing
    sample_text = "This is a great example of AI text processing! It's amazing."
    
    # Process text using different components
    text_analysis = app.process_input('text_processor', sample_text)
    nlp_analysis = app.process_input('nlp', sample_text)
    
    # Print results
    print("Text Processing Results:")
    print(json.dumps(text_analysis, indent=2))
    print("\nNLP Analysis Results:")
    print(json.dumps(nlp_analysis, indent=2))
    
    # Save configuration
    app.save_config('ai_app_config.json')

if __name__ == "__main__":
    main()